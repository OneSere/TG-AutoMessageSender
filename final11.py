{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.11","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[],"dockerImageVersionId":31040,"isInternetEnabled":true,"language":"python","sourceType":"script","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# %% [code]\n# üöÄ TG AutoMessageSender - Gradient UI & Enhanced Section Layout\r\n# Developed by Abhishek Choudhary aka @curiosityandyou\r\n\r\nimport os\r\nimport re\r\nimport json\r\nimport asyncio\r\nimport webbrowser\r\nimport tkinter as tk\r\nfrom tkinter import ttk, filedialog\r\nfrom telethon import TelegramClient\r\nfrom telethon.tl.functions.channels import JoinChannelRequest\r\nfrom datetime import datetime\r\n\r\nAPI_ID = 25843334\r\nAPI_HASH = 'e752bb9ebc151b7e36741d7ead8e4fd0'\r\n\r\nclass TelegramAutoMessenger:\r\n    def __init__(self, root):\r\n        self.root = root\r\n        self.root.title(\"TG AutoMessageSender\")\r\n        self.root.geometry(\"900x780\")\r\n        self.loop = asyncio.get_event_loop()\r\n        self.client = None\r\n        self.messages = []\r\n        self.entities = []\r\n\r\n        self.phone = tk.StringVar()\r\n        self.otp = tk.StringVar()\r\n        self.group_input = tk.StringVar()\r\n        self.interval_value = tk.StringVar(value=\"10\")\r\n        self.interval_unit = tk.StringVar(value=\"Seconds\")\r\n        self.repeat_count = tk.StringVar(value=\"1\")\r\n        self.status_text = tk.StringVar(value=\"Welcome! Please login to begin.\")\r\n\r\n        self.setup_styles()\r\n        self.build_ui()\r\n        self.poll_asyncio()\r\n\r\n    def setup_styles(self):\r\n        self.root.configure(bg=\"#e6f0ff\")\r\n        style = ttk.Style()\r\n        style.theme_use(\"clam\")\r\n        style.configure(\"TFrame\", background=\"#f4faff\")\r\n        style.configure(\"TLabel\", background=\"#f4faff\", foreground=\"#00264d\", font=(\"Segoe UI\", 10))\r\n        style.configure(\"TEntry\", font=(\"Segoe UI\", 10))\r\n        style.configure(\"TButton\", font=(\"Segoe UI\", 10, \"bold\"), padding=6)\r\n        style.configure(\"TCombobox\", font=(\"Segoe UI\", 10))\r\n        style.configure(\"TLabelframe\", background=\"#f4faff\", foreground=\"#003366\", font=(\"Segoe UI\", 10, \"bold\"))\r\n\r\n    def build_ui(self):\r\n        main = ttk.Frame(self.root, padding=15)\r\n        main.pack(fill=\"both\", expand=True)\r\n\r\n        ttk.Label(main, text=\"TG AutoMessageSender\", font=(\"Segoe UI\", 18, \"bold\"), foreground=\"#004080\").grid(row=0, column=0, columnspan=3, sticky=\"w\")\r\n        link = tk.Label(main, text=\"Built by @curiosityandyou\", font=(\"Segoe UI\", 9, \"underline\"), foreground=\"blue\", cursor=\"hand2\", bg=\"#f4faff\")\r\n        link.grid(row=1, column=0, sticky=\"w\")\r\n        link.bind(\"<Button-1>\", lambda e: webbrowser.open_new(\"https://t.me/curiosityandyou\"))\r\n\r\n        # Login Section\r\n        login = ttk.Labelframe(main, text=\"üîê Login Section\")\r\n        login.grid(row=2, column=0, columnspan=3, sticky=\"we\", pady=10)\r\n        ttk.Label(login, text=\"Phone:\").grid(row=0, column=0)\r\n        phone_entry = ttk.Entry(login, textvariable=self.phone, width=25)\r\n        phone_entry.insert(0, \"+91xxxxxxxxxx\")\r\n        phone_entry.bind(\"<FocusIn>\", lambda e: phone_entry.delete(0, tk.END))\r\n        phone_entry.grid(row=0, column=1)\r\n        ttk.Label(login, text=\"OTP:\").grid(row=1, column=0)\r\n        otp_entry = ttk.Entry(login, textvariable=self.otp, width=15)\r\n        otp_entry.insert(0, \"12345\")\r\n        otp_entry.bind(\"<FocusIn>\", lambda e: otp_entry.delete(0, tk.END))\r\n        otp_entry.grid(row=1, column=1)\r\n        ttk.Button(login, text=\"Login\", command=self.login).grid(row=0, column=2, padx=5)\r\n        ttk.Button(login, text=\"Submit OTP\", command=self.submit_otp).grid(row=1, column=2, padx=5)\r\n        ttk.Button(login, text=\"üöÄ Start Messaging\", command=self.start_messaging).grid(row=2, column=0, columnspan=3, pady=5)\r\n        ttk.Label(login, textvariable=self.status_text, foreground=\"#009933\").grid(row=3, column=0, columnspan=3, sticky=\"w\", pady=3)\r\n\r\n        # Group Section\r\n        group = ttk.Labelframe(main, text=\"üì§ Group Configuration\")\r\n        group.grid(row=3, column=0, columnspan=3, sticky=\"we\")\r\n        ttk.Label(group, text=\"Groups (comma separated):\").grid(row=0, column=0)\r\n        group_entry = ttk.Entry(group, textvariable=self.group_input, width=60)\r\n        group_entry.insert(0, \"@examplegroup\")\r\n        group_entry.bind(\"<FocusIn>\", lambda e: group_entry.delete(0, tk.END))\r\n        group_entry.grid(row=0, column=1)\r\n        ttk.Button(group, text=\"üíæ Save\", command=self.save_settings).grid(row=0, column=2)\r\n\r\n        # Messages Section\r\n        msg_frame = ttk.Labelframe(main, text=\"‚úçÔ∏è Compose Messages\")\r\n        msg_frame.grid(row=4, column=0, columnspan=3, sticky=\"we\")\r\n        self.msg_entry = ttk.Entry(msg_frame, width=50)\r\n        self.msg_entry.pack(side=\"left\", padx=(5, 0), pady=5)\r\n        ttk.Button(msg_frame, text=\"Add Message\", command=self.add_message).pack(side=\"left\", padx=5)\r\n        self.msg_listbox = tk.Listbox(msg_frame, height=3, bg=\"#ffffff\", fg=\"black\", font=(\"Segoe UI\", 10))\r\n        self.msg_listbox.pack(fill=\"x\", padx=5, pady=(3, 5))\r\n\r\n        # Timing Section\r\n        timing = ttk.Labelframe(main, text=\"‚è±Ô∏è Timing & Repeats\")\r\n        timing.grid(row=5, column=0, columnspan=3, sticky=\"we\")\r\n        ttk.Label(timing, text=\"Gap Between Messages:\").grid(row=0, column=0)\r\n        ttk.Entry(timing, textvariable=self.interval_value, width=6).grid(row=0, column=1)\r\n        ttk.Combobox(timing, textvariable=self.interval_unit, values=[\"Seconds\", \"Minutes\", \"Hours\"], width=10).grid(row=0, column=2)\r\n        ttk.Label(timing, text=\"Repeat Messages:\").grid(row=0, column=3)\r\n        ttk.Entry(timing, textvariable=self.repeat_count, width=6).grid(row=0, column=4)\r\n\r\n        # Save / Load Section\r\n        layout = ttk.Labelframe(main, text=\"üíº Save / Load Layouts\")\r\n        layout.grid(row=6, column=0, columnspan=3, sticky=\"we\")\r\n        ttk.Label(layout, text=\"üí° Save your layout to reload settings instantly later.\").grid(row=0, column=0, columnspan=2, sticky=\"w\")\r\n        ttk.Button(layout, text=\"Save Settings\", command=self.save_settings).grid(row=1, column=0, pady=5, padx=5)\r\n        ttk.Button(layout, text=\"Load Settings\", command=self.load_settings).grid(row=1, column=1, pady=5, padx=5)\r\n\r\n        # Log Section\r\n        log_frame = ttk.Labelframe(main, text=\"üìú Live Status Updates\")\r\n        log_frame.grid(row=7, column=0, columnspan=3, sticky=\"nsew\", pady=5)\r\n        self.log = tk.Text(log_frame, height=10, bg=\"#ffffff\", fg=\"#003300\", font=(\"Consolas\", 10))\r\n        self.log.pack(fill=\"both\", expand=True, padx=5, pady=5)\r\n\r\n        # Support Note\r\n        note = tk.Label(main, text=\"‚ùì Facing issues? Contact admin @curiosityandyou\", fg=\"blue\", cursor=\"hand2\", font=(\"Segoe UI\", 9), bg=\"#f4faff\")\r\n        note.grid(row=8, column=0, columnspan=3, sticky=\"w\", padx=10, pady=8)\r\n        note.bind(\"<Button-1>\", lambda e: webbrowser.open_new(\"https://t.me/curiosityandyou\"))\r\n\r\n    def poll_asyncio(self):\r\n        try:\r\n            self.loop.call_soon(self.loop.stop)\r\n            self.loop.run_forever()\r\n        finally:\r\n            self.root.after(100, self.poll_asyncio)\r\n\r\n    def log_write(self, text):\r\n        now = datetime.now().strftime(\"[%H:%M:%S]\")\r\n        self.log.insert(\"end\", f\"{now} {text}\\n\")\r\n        self.log.see(\"end\")\r\n        self.status_text.set(text)\r\n\r\n    def add_message(self):\r\n        msg = self.msg_entry.get().strip()\r\n        if msg:\r\n            self.messages.append(msg)\r\n            self.msg_listbox.insert(\"end\", msg)\r\n            self.msg_entry.delete(0, \"end\")\r\n            self.log_write(\"üì® Message added\")\r\n\r\n    def login(self):\r\n        self.log_write(\"üîê Logging in...\")\r\n        self.loop.create_task(self.async_login())\r\n\r\n    async def async_login(self):\r\n        try:\r\n            phone = self.phone.get().strip()\r\n            session = f\"session_{phone.replace('+', '')}\"\r\n            self.client = TelegramClient(session, API_ID, API_HASH)\r\n            await self.client.connect()\r\n            if await self.client.is_user_authorized():\r\n                self.log_write(\"‚úÖ Logged in with saved session.\")\r\n            else:\r\n                await self.client.send_code_request(phone)\r\n                self.log_write(\"üì© OTP sent.\")\r\n        except Exception as e:\r\n            self.log_write(f\"‚ùå Login failed: {e}\")\r\n\r\n    def submit_otp(self):\r\n        self.log_write(\"üîê Submitting OTP...\")\r\n        self.loop.create_task(self.async_submit_otp())\r\n\r\n    async def async_submit_otp(self):\r\n        try:\r\n            await self.client.sign_in(self.phone.get().strip(), self.otp.get().strip())\r\n            self.log_write(\"‚úÖ Logged in.\")\r\n        except Exception as e:\r\n            self.log_write(f\"‚ùå OTP error: {e}\")\r\n\r\n    def save_settings(self):\r\n        data = {\r\n            \"phone\": self.phone.get(),\r\n            \"group_input\": self.group_input.get(),\r\n            \"interval_value\": self.interval_value.get(),\r\n            \"interval_unit\": self.interval_unit.get(),\r\n            \"repeat_count\": self.repeat_count.get(),\r\n            \"messages\": self.messages\r\n        }\r\n        with open(\"settings.json\", \"w\") as f:\r\n            json.dump(data, f)\r\n        self.log_write(\"üíæ Settings saved.\")\r\n\r\n    def load_settings(self):\r\n        try:\r\n            with open(\"settings.json\", \"r\") as f:\r\n                data = json.load(f)\r\n                self.phone.set(data.get(\"phone\", \"\"))\r\n                self.group_input.set(data.get(\"group_input\", \"\"))\r\n                self.interval_value.set(data.get(\"interval_value\", \"10\"))\r\n                self.interval_unit.set(data.get(\"interval_unit\", \"Seconds\"))\r\n                self.repeat_count.set(data.get(\"repeat_count\", \"1\"))\r\n                self.messages = data.get(\"messages\", [])\r\n                self.msg_listbox.delete(0, \"end\")\r\n                for msg in self.messages:\r\n                    self.msg_listbox.insert(\"end\", msg)\r\n            self.log_write(\"üìÇ Settings loaded.\")\r\n        except Exception as e:\r\n            self.log_write(f\"‚ùå Load error: {e}\")\r\n\r\n    def start_messaging(self):\r\n        self.log_write(\"üöÄ Starting messaging round...\")\r\n        self.loop.create_task(self.async_start_messaging())\r\n\r\n    async def async_start_messaging(self):\r\n        try:\r\n            groups = [g.strip() for g in self.group_input.get().split(',') if g.strip()]\r\n            repeat = int(self.repeat_count.get())\r\n            interval = int(self.interval_value.get())\r\n            unit = self.interval_unit.get().lower()\r\n            seconds = interval * {\"seconds\": 1, \"minutes\": 60, \"hours\": 3600}[unit]\r\n\r\n            self.entities = []\r\n            for group in groups:\r\n                try:\r\n                    entity = await self.client.get_entity(group)\r\n                    self.entities.append(entity)\r\n                except Exception as e:\r\n                    self.log_write(f\"‚ö†Ô∏è Could not join: {group} ({e})\")\r\n\r\n            for r in range(repeat):\r\n                self.log_write(f\"üîÅ Round {r+1}/{repeat}\")\r\n                for i, msg in enumerate(self.messages):\r\n                    for entity in self.entities:\r\n                        try:\r\n                            result = await self.client.send_message(entity, msg)\r\n                            if result.id:\r\n                                self.log_write(f\"‚úÖ Sent '{msg}' to {entity.title or entity.username}\")\r\n                            await asyncio.sleep(seconds)\r\n                        except Exception as e:\r\n                            self.log_write(f\"‚ùå Error sending to {entity.title}: {e}\")\r\n            self.log_write(\"‚úÖ All messages are sent successfully!\")\r\n        except Exception as e:\r\n            self.log_write(f\"‚ùå Messaging failed: {e}\")\r\n\r\nif __name__ == \"__main__\":\r\n    root = tk.Tk()\r\n    app = TelegramAutoMessenger(root)\r\n    root.mainloop()\r\n","metadata":{"_uuid":"2ac4b309-e867-4b7f-a2f7-788b389f18ff","_cell_guid":"32170065-dd1b-4874-92c9-9bc2d859b9e6","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":null}]}